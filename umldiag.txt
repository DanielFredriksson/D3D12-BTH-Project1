@startuml

title Relationships - Class Diagram

class Renderer {
+Renderer *makeRenderer(BACKEND backend);

+int initialize(width, height)
+void present()
+int shutdown()

+void setClearColor(float, float, float, float)
+void clearBuffer(CLEAR_BUFFER_FLAGS)
+void setRenderState(RenderState*)
+void submit(Mesh*)
+void frame();
}

class Mesh {
+void addIAVertexBufferBinding(...)
+void bindVertexBuffer(...)
+void addTexture(...)

+map<location, pair<offset, VertexBufferBind>> geometryBuffers
+map<location, pair<offset, Texture2D>> textures
+Technique* technique
+Transform* transform;
+ConstantBuffer* txBuffer;
}

class VertexBufferBind {
    size_t numElements;
    size_t offset;
    VertexBuffer* buffer;
}

class Material {
+void setShader(filename, SHADER_TYPE)
+void removeShader(SHADER_TYPE)
+void addDefine(defineText, SHADER_TYPE)
+int compileMaterial(string& err)
+int enable()
+void disable()
}

class Technique {
// single pass
Material* material
vector<ResourceBinding*> bindings
RenderState* rs
'+int updateAttribute(SHADER_TYPE,name,data,size)
'+int setAttributePointer(SHADER_TYPE,name,ptr) 
}

class ConstantBuffer {
+void setData(...)
+void bind(...)
}

class VertexBuffer {
+void setData(...)
+void bind(...)
+void unbind(...)
+size_t getSize()
}

class Texture2D {
    +int loadFromFile(string)
    Sampler2D* sampler;
}


'composition
VertexBufferBind "1" *-down- "1" VertexBuffer
Mesh "1" *-down- "*" VertexBufferBind
Mesh "1" *-down- "*" Texture2D
Mesh "1" *-down- "1" ConstantBuffer
Texture2D "1" *-down- "1" Sampler2D
Mesh "1" *-down- "1" Technique
'Mesh "1" *-right- "*" Buffer
Technique "1" *-up- "1" Material
Technique "1" *-down- "1" RenderState

@enduml
